"""
üîß CORRIGIDO: Spacetime Dilation Simulator

Este m√≥dulo implementa c√°lculos de dilata√ß√£o do espa√ßotempo corrigidos
comparando diferentes ambientes gravitacionais:
- Cosmonautas pr√≥ximos a horizontes de eventos de buracos negros
- Observadores na Terra
- Referenciais de part√≠culas qu√¢nticas

CORRE√á√ïES IMPLEMENTADAS:
- Sistema de unidades consistente (UnidadesFisicas)
- Massas e dist√¢ncias baseadas em valores f√≠sicos reais
- Elimina√ß√£o de par√¢metros arbitr√°rios
- Valida√ß√£o dimensional
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import constants


class UnidadesFisicas:
    """Sistema rigoroso de unidades f√≠sicas com convers√µes autom√°ticas"""
    
    def __init__(self):
        # === CONSTANTES SI ===
        self.c_SI = constants.c                    # 299792458 m/s
        self.G_SI = constants.G                    # 6.674e-11 m¬≥/(kg‚ãÖs¬≤)
        self.hbar_SI = constants.hbar              # 1.055e-34 J‚ãÖs
        self.m_e_SI = constants.m_e                # 9.109e-31 kg
        
        # === MASSAS E DIST√ÇNCIAS F√çSICAS ===
        self.M_earth_SI = 5.972e24                 # kg
        self.R_earth_SI = 6.371e6                  # metros
        self.M_sun_SI = 1.989e30                   # kg
        
        # === ESCALAS DE PLANCK ===
        self.m_planck = np.sqrt(self.hbar_SI * self.c_SI / self.G_SI)
        self.l_planck = np.sqrt(self.hbar_SI * self.G_SI / self.c_SI**3)
        
    def to_natural(self, value_SI, unit_type):
        """Converte de SI para unidades naturais"""
        if unit_type == 'mass':
            return value_SI / self.m_planck
        elif unit_type == 'length':
            return value_SI / self.l_planck
        else:
            raise ValueError(f"Tipo '{unit_type}' n√£o reconhecido")


class SpacetimeDilationSimulator:
    """üîß CORRIGIDO: Simula efeitos de dilata√ß√£o temporal com f√≠sica real"""
    
    def __init__(self):
        # Sistema de unidades rigoroso
        self.unidades = UnidadesFisicas()
        
        # Constantes em unidades naturais (c = G = 1)
        self.c = 1.0
        self.G = 1.0
        
        # üîß CORRIGIDO: Massas baseadas na f√≠sica real
        self.M_earth = self.unidades.to_natural(self.unidades.M_earth_SI, 'mass')
        self.M_sun = self.unidades.to_natural(self.unidades.M_sun_SI, 'mass')
        self.M_black_hole = 10 * self.M_sun  # Buraco negro estelar t√≠pico
        
        print("üîß SIMULATOR INICIALIZADO COM VALORES F√çSICOS CORRETOS")
        print(f"üìç M_earth = {self.M_earth:.2e} [m_planck]")
        print(f"‚òÄÔ∏è  M_sun = {self.M_sun:.2e} [m_planck]")
        print(f"üï≥Ô∏è  M_black_hole = {self.M_black_hole:.2e} [m_planck]")
        
    def schwarzschild_time_dilation_rigorous(self, mass_kg, radius_m):
        """
        üî¨ DERIVADO: Fator de dilata√ß√£o temporal da m√©trica de Schwarzschild
        
        Args:
            mass_kg: Massa gravitacional em kg (SI)
            radius_m: Dist√¢ncia do centro da massa em metros (SI)
            
        Returns:
            Fator de dilata√ß√£o œÑ = ‚àö(1 - Rs/r) onde Rs = 2GM/c¬≤
        """
        # Convers√µes rigorosas para unidades naturais
        mass_natural = self.unidades.to_natural(mass_kg, 'mass')
        radius_natural = self.unidades.to_natural(radius_m, 'length')
        
        # Raio de Schwarzschild em unidades naturais: Rs = 2M
        schwarzschild_radius = 2 * mass_natural
        
        # Valida√ß√£o f√≠sica
        if radius_natural <= schwarzschild_radius:
            return 0.0  # No horizonte de eventos
            
        # M√©trica de Schwarzschild: g‚ÇÄ‚ÇÄ = -(1 - Rs/r)
        tau = np.sqrt(1 - schwarzschild_radius / radius_natural)
        
        return tau
    
    def schwarzschild_time_dilation_natural(self, mass_natural, radius_natural):
        """
        Vers√£o em unidades naturais para c√°lculos internos
        """
        rs = 2 * mass_natural
        if radius_natural <= rs:
            return 0.0
        return np.sqrt(1 - rs / radius_natural)
    
    def simulate_cosmonaut_vs_earth_corrected(self, cosmonaut_distance_factor=1.1):
        """
        üîß CORRIGIDO: Simula dilata√ß√£o temporal entre cosmonauta pr√≥ximo ao buraco negro
        e trabalhador na Terra usando valores f√≠sicos reais
        
        Args:
            cosmonaut_distance_factor: Qu√£o pr√≥ximo do horizonte (1.0 = exatamente no horizonte)
        """
        # Posi√ß√£o do cosmonauta (logo fora do horizonte de eventos)
        rs_bh = 2 * self.M_black_hole  # Em unidades naturais: Rs = 2M
        r_cosmonaut = cosmonaut_distance_factor * rs_bh
        
        # Posi√ß√£o do observador na Terra (superf√≠cie terrestre)
        r_earth = self.unidades.to_natural(self.unidades.R_earth_SI, 'length')
        
        # üîß CORRIGIDO: C√°lculos com unidades consistentes
        tau_cosmonaut = self.schwarzschild_time_dilation_natural(self.M_black_hole, r_cosmonaut)
        tau_earth = self.schwarzschild_time_dilation_natural(self.M_earth, r_earth)
        
        # Dilata√ß√£o relativa
        relative_dilation = tau_earth / tau_cosmonaut if tau_cosmonaut > 0 else float('inf')
        
        return {
            'cosmonaut_dilation': tau_cosmonaut,
            'earth_dilation': tau_earth,
            'relative_dilation': relative_dilation,
            'cosmonaut_distance_natural': r_cosmonaut,
            'earth_distance_natural': r_earth,
            'schwarzschild_radius_natural': rs_bh,
            'cosmonaut_distance_km': self.unidades.l_planck * r_cosmonaut / 1000,  # Convers√£o para km
            'schwarzschild_radius_km': self.unidades.l_planck * rs_bh / 1000
        }
    
    def quantum_scale_analogy_corrected(self, particle_mass_kg):
        """
        üîß CORRIGIDO: Aplica princ√≠pios de dilata√ß√£o em escalas qu√¢nticas com f√≠sica real
        
        Args:
            particle_mass_kg: Massa real da part√≠cula em kg (ex: el√©tron, pr√≥ton)
        """
        # üîß CORRIGIDO: Massa efetiva baseada na f√≠sica qu√¢ntico-gravitacional
        # Quando Rs_quantum ~ Œª_Compton, efeitos se tornam relevantes
        lambda_compton_m = self.unidades.hbar_SI / (particle_mass_kg * self.unidades.c_SI)
        
        # Massa efetiva no regime qu√¢ntico-gravitacional
        # Baseada na escala onde gravidade qu√¢ntica importa
        m_quantum_eff_kg = np.sqrt(self.unidades.hbar_SI * self.unidades.c_SI / self.unidades.G_SI)
        
        # Convers√µes para unidades naturais
        m_quantum_natural = self.unidades.to_natural(m_quantum_eff_kg, 'mass')
        r_quantum_natural = self.unidades.to_natural(lambda_compton_m, 'length')
        r_earth_natural = self.unidades.to_natural(self.unidades.R_earth_SI, 'length')
        
        # C√°lculos com f√≠sica real
        tau_quantum = self.schwarzschild_time_dilation_natural(m_quantum_natural, r_quantum_natural)
        tau_macro = self.schwarzschild_time_dilation_natural(self.M_earth, r_earth_natural)
        
        quantum_relative_dilation = tau_macro / tau_quantum if tau_quantum > 0 else float('inf')
        
        return {
            'quantum_dilation': tau_quantum,
            'macro_dilation': tau_macro,
            'quantum_relative_dilation': quantum_relative_dilation,
            'lambda_compton_m': lambda_compton_m,
            'quantum_mass_eff_kg': m_quantum_eff_kg,
            'regime': 'quantum_gravity' if lambda_compton_m < self.unidades.l_planck * 1e10 else 'classical_quantum'
        }
    
    def plot_dilation_comparison(self):
        """Create visualization comparing different dilation scenarios"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Plot 1: Cosmonauta vs Observador na Terra (CORRIGIDO)
        distances = np.linspace(1.01, 10, 100)  # Fatores de dist√¢ncia do horizonte
        dilations = []
        
        for d in distances:
            result = self.simulate_cosmonaut_vs_earth_corrected(d)
            dilations.append(result['relative_dilation'])
        
        ax1.plot(distances, dilations)
        ax1.set_xlabel('Dist√¢ncia do Horizonte (raios de Schwarzschild)')
        ax1.set_ylabel('Fator de Dilata√ß√£o (Terra/Cosmonauta)')
        ax1.set_title('üîß CORRIGIDO: Dilata√ß√£o Cosmonauta vs Terra')
        ax1.set_yscale('log')
        ax1.grid(True)
        
        # Plot 2: Analogia em escalas qu√¢nticas (CORRIGIDA)
        # Usar massas f√≠sicas reais em vez de fatores arbitr√°rios
        electron_mass = self.unidades.m_e_SI
        proton_mass = 1.67e-27  # kg
        
        masses = [electron_mass, proton_mass]
        mass_names = ['el√©tron', 'pr√≥ton']
        
        for mass_kg, name in zip(masses, mass_names):
            result = self.quantum_scale_analogy_corrected(mass_kg)
            ax2.bar(name, result['quantum_relative_dilation'], alpha=0.7)
        
        ax2.set_xlabel('Tipo de Part√≠cula')
        ax2.set_ylabel('Fator de Dilata√ß√£o (Macro/Qu√¢ntico)')
        ax2.set_title('üîß CORRIGIDO: Dilata√ß√£o em Escalas Qu√¢nticas')
        ax2.set_yscale('log')
        ax2.grid(True, axis='y')
        
        plt.tight_layout()
        return fig


if __name__ == "__main__":
    print("üîß SPACETIME DILATION SIMULATOR CORRIGIDO")
    print("=" * 50)
    
    simulator = SpacetimeDilationSimulator()
    
    # üîß EXEMPLO CORRIGIDO: Cen√°rio do cosmonauta
    cosmonaut_result = simulator.simulate_cosmonaut_vs_earth_corrected(1.1)
    print("\nüöÄ Simula√ß√£o Cosmonauta vs Terra (CORRIGIDA):")
    print(f"  Dilata√ß√£o cosmonauta: œÑ = {cosmonaut_result['cosmonaut_dilation']:.6f}")
    print(f"  Dilata√ß√£o Terra: œÑ = {cosmonaut_result['earth_dilation']:.6f}")
    print(f"  Dilata√ß√£o relativa: {cosmonaut_result['relative_dilation']:.2f}x")
    print(f"  Dist√¢ncia do cosmonauta: {cosmonaut_result['cosmonaut_distance_km']:.2e} km")
    print(f"  Raio de Schwarzschild: {cosmonaut_result['schwarzschild_radius_km']:.2e} km")
    
    # üîß EXEMPLO CORRIGIDO: Analogia qu√¢ntica com f√≠sica real
    electron_mass = simulator.unidades.m_e_SI
    proton_mass = 1.67e-27  # kg
    
    print(f"\n‚öõÔ∏è Analogia em Escalas Qu√¢nticas (CORRIGIDA):")
    
    for mass_kg, name in [(electron_mass, 'el√©tron'), (proton_mass, 'pr√≥ton')]:
        quantum_result = simulator.quantum_scale_analogy_corrected(mass_kg)
        print(f"\n  {name.capitalize()}:")
        print(f"    Dilata√ß√£o qu√¢ntica: œÑ = {quantum_result['quantum_dilation']:.10f}")
        print(f"    Dilata√ß√£o macro: œÑ = {quantum_result['macro_dilation']:.6f}")
        print(f"    Dilata√ß√£o relativa: {quantum_result['quantum_relative_dilation']:.2e}x")
        print(f"    Œª_Compton: {quantum_result['lambda_compton_m']:.2e} m")
        print(f"    Regime: {quantum_result['regime']}")
    
    # Visualiza√ß√£o
    try:
        fig = simulator.plot_dilation_comparison()
        plt.show()
        print("\n‚úÖ SIMULADOR CORRIGIDO EXECUTADO COM SUCESSO!")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Visualiza√ß√£o: {e}")
        print("‚úÖ C√ÅLCULOS PRINCIPAIS FUNCIONANDO CORRETAMENTE!")

    # === INTEGRA√á√ÉO COM QFT EM SPACETIME CURVO ===
    print("\n" + "="*60)
    print("üöÄ INTEGRA√á√ÉO COM QFT EM SPACETIME CURVO")
    print("="*60)
    
    try:
        # Importar implementa√ß√µes avan√ßadas
        from quantum_observer import QuantumObserverFramework
        
        # Testar integra√ß√£o
        observer = QuantumObserverFramework()
        
        # Calcular QFT para cen√°rio do buraco negro
        print("\nüî¨ QFT em m√©trica de Schwarzschild:")
        modes = observer.qftcs.mode_decomposition_curved_spacetime(
            simulator.unidades.M_sun_SI, 30000  # 30 km do buraco negro solar
        )
        
        print(f"‚úÖ Integra√ß√£o QFT-Spacetime: SUCESSO")
        print(f"   ‚Ä¢ M√©trica g_tt: {modes['g_tt']:.6f}")
        print(f"   ‚Ä¢ Formalismo: {modes['formalism']}")
        
        # Valida√ß√£o de consist√™ncia
        mass_natural = simulator.unidades.to_natural(simulator.unidades.M_sun_SI, 'mass')
        observer_dilation = observer.observer_dilation_factor_derived(
            simulator.unidades.M_sun_SI, 30000
        )
        
        print(f"‚úÖ Consist√™ncia entre simuladores:")
        print(f"   ‚Ä¢ Massa solar: {mass_natural:.2e} [unidades naturais]")
        print(f"   ‚Ä¢ Dilata√ß√£o QFT: œÑ = {observer_dilation:.6f}")
        
        # Executar an√°lise cr√≠tica rigorosa das limita√ß√µes
        print(f"\n‚ö†Ô∏è AN√ÅLISE CR√çTICA RIGOROSA:")
        
        # Testar conex√µes nucleares especulativas
        nuclear_analysis = observer.critical_analysis.evaluate_nuclear_connections()
        
        # Testar consist√™ncia matem√°tica
        consistency_analysis = observer.critical_analysis.evaluate_consistency_gaps()
        
        # Testar ant√≠teses fundamentais  
        antithesis_analysis = observer.critical_analysis.test_fundamental_antitheses()
        
        # Status cient√≠fico honesto
        critical_results = observer.critical_analysis.honest_scientific_status()
        
        print(f"\nüéØ RESULTADO DA AN√ÅLISE RIGOROSA:")
        print(f"   ‚Ä¢ Conex√µes nucleares: {nuclear_analysis.get('mathematical_rigor', 'N/A')}")
        print(f"   ‚Ä¢ Consist√™ncia matem√°tica: {consistency_analysis.get('consistency_status', 'N/A')}")
        print(f"   ‚Ä¢ Ant√≠teses identificadas: {antithesis_analysis.get('fatal_antitheses', 0)}")
        print(f"   ‚Ä¢ Veredicto: {antithesis_analysis.get('refutation_status', 'N/A')}")
        
        # Status final integrado
        print(f"\nüéØ SISTEMA INTEGRADO COM AN√ÅLISE CR√çTICA:")
        print(f"   ‚Ä¢ SpacetimeDilationSimulator + QuantumObserverFramework")
        print(f"   ‚Ä¢ QFT formal + Simula√ß√µes num√©ricas + Testes de refuta√ß√£o")
        
        if antithesis_analysis.get('fatal_antitheses', 0) > 0:
            print(f"   ‚Ä¢ Status: TEORIA COM CONTRADI√á√ïES FUNDAMENTAIS")
            print(f"   ‚Ä¢ Teoria Horizonte-1: REFUTADA por ant√≠teses simples")
        else:
            print(f"   ‚Ä¢ Status: Framework em desenvolvimento com limita√ß√µes reconhecidas")
            print(f"   ‚Ä¢ Teoria Horizonte-1: FRAMEWORK EM DESENVOLVIMENTO")
        
    except ImportError:
        print("‚ö†Ô∏è quantum_observer n√£o dispon√≠vel para integra√ß√£o")
        print("   (Execute primeiro as implementa√ß√µes QFT)")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na integra√ß√£o: {e}")
        print("‚úÖ SpacetimeDilationSimulator funcional independentemente")